# 多阶段构建 - 前端优化版本
FROM node:20-alpine AS frontend-builder

# 使用官方pnpm镜像以获得更好的缓存
WORKDIR /app/ui

# 先复制package.json和锁文件，利用Docker层缓存
COPY ui/package.json ui/pnpm-lock.yaml ./

# 安装pnpm并配置缓存
RUN npm install -g pnpm@latest && \
    pnpm config set store-dir ~/.pnpm-store && \
    pnpm install --frozen-lockfile --prefer-offline

# 复制源代码并构建
COPY ui/ ./
RUN pnpm run build

# 后端构建阶段 - 优化版本
FROM golang:1.24-alpine AS backend-builder

# 安装必要的工具
RUN apk add --no-cache git

WORKDIR /app

# 先复制go.mod和go.sum，利用Docker层缓存
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# 复制源代码（排除不必要的文件）
COPY *.go ./
COPY pkg/ ./pkg/
COPY cmd/ ./cmd/ 2>/dev/null || true

# 从前端构建阶段复制静态文件到正确位置
COPY --from=frontend-builder /app/static ./static

# 构建Go应用
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 \
    go build -trimpath \
    -ldflags="-s -w -X main.version=$(date +%Y%m%d-%H%M%S)" \
    -o kite .

# 最终运行时镜像
FROM gcr.io/distroless/static:nonroot

WORKDIR /app

# 复制二进制文件
COPY --from=backend-builder /app/kite .

# 设置用户和权限
USER 65532:65532

EXPOSE 8080

CMD ["./kite"]